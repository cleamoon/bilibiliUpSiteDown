#!/usr/bin/python

import os, sys, subprocess
from argparse import ArgumentParser, FileType

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.chrome.options import Options

if __name__ == '__main__':
    p = ArgumentParser(description="download all videos of a video uploader.")
    p.add_argument('ID', metavar='uploader\'s ID', type=str)
    p.add_argument('-c', '--cookie', metavar='cookie', type=str)
    p.add_argument('-f', '--fresh', action='store_true')
    args = p.parse_args()
    upId = args.ID
    cookie = args.cookie
    fresh = args.fresh
    downloaded = []
   
    if fresh:
        if os.path.exists(upId + ".txt"):
            os.remove(upId + ".txt")
        outfile = open(upId + ".txt", "w+")
    else:
        outfile = open(upId + ".txt", "a+")
        lines = outfile.readlines()
        for line in lines:
            downloaded.append(line)

    out = []
    
    chrome_options = Options()
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox") # linux only
    chrome_options.add_argument("--headless")

    # Start parsing
    for i in range(1, 9999):
        with webdriver.Chrome(options=chrome_options) as driver:
            wait = WebDriverWait(driver, 10)
            driver.get("https://space.bilibili.com/" + upId + "/video?tid=0&page=" + str(i) + "&keyword=&order=pubdate")
            spans = driver.find_elements(By.TAG_NAME, "span")
            done = False
            for span in spans:
                if span.get_attribute("class") is not None and span.get_attribute("class") == "count":
                    if span.text == "0":
                        print("Scaning finished")
                        done = True
                        break
            if done: 
                break
            tags = driver.find_elements(By.TAG_NAME, "a")
            for tag in tags:
                if tag.get_attribute("class") is not None and tag.get_attribute("class") == "title" and (tag.get_attribute("href"), tag.get_attribute("title")) not in out:
                    print("Found " + tag.get_attribute("title"))
                    out.append((tag.get_attribute("href"), tag.get_attribute("title")))
            driver.quit()

    out.reverse()

    # Start downloading
    for item in out:
        if not fresh:
            if item[0] in downloaded:
                print("Finished download " + item[1])
                continue
        print("Start download " + item[1])
        while True:
            #res = os.system("you-get --debug -l --no-caption \"" + item[0] + "\" -o Contents")
            try:
                if cookie is None:
                    comm = "you-get -l --no-caption \"" + item[0] + "\" -o Contents"
                else: 
                    comm = "you-get -l --no-caption \"" + item[0] + "\" -o Contents -c " + cookie
                cp = subprocess.run(comm, shell=True)
                if cp.returncode == 0:
                    break
                else:
                    continue
            except KeyboardInterrupt:
                print('Awakened')
                exit(1)
        print("Finished download " + item[1])
        outfile.write(item[0] + "\n")
        outfile.flush()

